[tool.poetry]
name = "alter-jira"
version = "0.1.0"
description = ""
authors = ["Your Name <you@example.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.110.3"
pydantic = "^2.7.1"
pydantic-settings = "^2.2.1"
sqlalchemy = "^2.0.29"
psycopg2 = "^2.9.9"
uvicorn = "^0.29.0"

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.7.0"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"




[tool.ruff]
select = [
    # pycodestyle
    "E",
    # pyflakes
    "F",
    # bugbear
    "B",
    # temporary mccabe https://github.com/charliermarsh/ruff/issues/3052
    "C9",
    # mccabe and flake8-comprehensions
    "C",
    # isort
    "I",
    # pep8-naming
    "N",
    # pyupgrade
    "UP",
    # bandit
    "S",
    # flake8-blind-except
    "BLE",
    # flake8-comprehensions
    "C4",
    # flake8-datetimez
    "DTZ",
    # flake8-debugger
    "T10",
    # flake8-django
    "DJ",
    # flake8-errmsg
    "EM",
    # flake8-implicit-str-concat
    "ISC",
    # flake8-logging-format
    "G",
    # flake8-no-pep420
    "INP",
    # flake8-pie
    "PIE",
    # flake8-print
    "T20",
    # flake8-pytest-style
    "PT",
    # flake8-quotes
    "Q",
    # flake8-raise
    "RSE",
    # flake8-self
    "SLF",
    # flake8-simplify
    "SIM",
    # flake8-unused-arguments
    "ARG",
    # flake8-use-pathlib
    "PTH",
    # eradicate
    "ERA",
    # pygrep-hooks
    "PGH",
    # Pylint
    "PL",
    # tryceratops
    "TRY",
    # Ruff-specific rules
    "RUF",
]
ignore = [
    "S101",
    # we have russian in comments :D
    "RUF003",
    # and in values
    "RUF001",
    # we use other linters too
    "RUF100",
    # skip because of admin.py
    "RUF012",
    # skip for pyright
    "PGH003",
    # we do not want to use variable as exception message
    "EM101",
    # Magic value used in comparison, consider replacing 200 with a constant variable
    "PLR2004",
    # Use specific rule codes when using `noqa`
    "PGH004",
    # `open()` should be replaced by `Path.open()`
    "PTH123",
    # Use `f"{cls.model_config.get('env_prefix')}_"` instead of `f"{cls.model_config.get('env_prefix')}_" or ...`
    "SIM222",
    # Avoid specifying long messages outside the exception class
    "TRY003",
    #File is part of an implicit namespace package. Add an `__init__.py`.
    "INP001",
    # Logging statement uses f-string
    "G004",
    # Standard pseudo-random generators are not suitable for cryptographic purposes
    "S311"
]

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["I", "F"]
unfixable = ["PT"]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".git",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
]

# Same as Black.
line-length = 120

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Assume Python 3.11.
target-version = "py312"

[tool.ruff.mccabe]
max-complexity = 6

[tool.ruff.pylint]
max-args = 6
max-returns = 6


[tool.flake8]
max-line-length = '120'
per-file-ignores = [
    '__init__.py:F401',
    '__init__.py:INP001',
]
ignore-files = [
]
count = true
ignore = ["W503",]
